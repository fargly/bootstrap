---
- name: Cross Platform Neovim Playbook
  hosts: localhost
  gather_facts: true

  vars:
    localbin: "{{ ansible_env.HOME }}/.local/bin"
    localnvim: "{{ ansible_env.HOME }}/.local/opt/nvim"
    system2nvimsystem:
      Darwin: "macos"
      Linux: "linux"

  tasks:

    - name: Ensure ~/.local/bin directory
      ansible.builtin.file:
        path: "{{ localbin }}"
        state: directory
        mode: "0755"

    - name: Ensure ~/.local/opt/nvim directory
      ansible.builtin.file:
        path: "{{ localnvim }}"
        state: directory
        mode: "0755"

    - name: Create symlink for nvim executable
      ansible.builtin.file:
        src: "{{ localnvim }}/bin/nvim"
        dest: "{{ localbin }}/nvim"
        state: link
        follow: false
        force: true

    - name: Create vim symlink for nvim symlink
      ansible.builtin.file:
        src: "{{ localbin }}/nvim"
        dest: "{{ localbin }}/vim"
        state: link
        follow: false
        force: true

    - name: Set Direct Download URI
      ansible.builtin.set_fact:
        download_uri: >-
          {{ "https://github.com/neovim/neovim/releases/latest/download/" +
          "nvim-" + system2nvimsystem[ansible_facts.system] + "-" +
          ansible_facts.architecture + ".tar.gz"
          }}

    - name: Check if nvim binary exists
      ansible.builtin.stat:
        path: "{{ localnvim }}/bin/nvim"
      register: nvim_binary

    - name: Check if FORCE_UPDATE is set
      ansible.builtin.set_fact:
        force_update: "{{ lookup('env', 'FORCE_UPDATE') | default('', true) }}"

    # - name: Display FORCE_UPDATE value
    #   ansible.builtin.debug:
    #     msg: "FORCE_UPDATE is set to: {{ force_update }}"

    - name: Clone Nvim Kickstart Repo
      ansible.builtin.git:
        repo: https://github.com/nvim-lua/kickstart.nvim.git
        dest: "{{ ansible_env.HOME }}/.config/nvim"
        update: true
      # noqa: latest

    - name: Ensure ~/.local/bin directory
      ansible.builtin.file:
        path: "{{ ansible_env.HOME }}/Projects/Fargly/fNv5"
        state: directory
        mode: "0755"

    - name: Configure Nvim Kickstart for Custom Plugins
      ansible.builtin.lineinfile:
        path: "{{ ansible_env.HOME }}/.config/nvim/init.lua"
        regexp: '^ *-- { import = ''custom.plugins'' },$'
        line: "{ import = 'custom.plugins' },"
        backup: true
        state: present

    - name: Configure Nvim Kickstart for Custom Plugins Extras
      ansible.builtin.copy:
        dest: "{{ ansible_env.HOME }}/.config/nvim/lua/custom/plugins/extras.lua"
        content: |
          vim.keymap.set('i', 'jj', '<Esc>', { noremap = true, silent = true })
          vim.o.relativenumber = true
          vim.opt.expandtab = true
          vim.opt.shiftwidth = 4
          vim.opt.tabstop = 4
          vim.opt.softtabstop = 4

          return {
            {
              'epwalsh/obsidian.nvim',
              version = '*', -- recommended, use latest release instead of latest commit
              lazy = false,
              ft = 'markdown',
              dependencies = {
                'nvim-lua/plenary.nvim',
              },
              opts = {
                workspaces = {
                  {
                    name = 'farglyNotes',
                    path = '~/Projects/Fargly/fNv5',
                  },
                },

                ui = {
                  checkboxes = {
                    [' '] = { char = '☐', hl_group = 'ObsidianTodo' },
                    ['x'] = { char = '☑', hl_group = 'ObsidianDone' },
                  },
                },
              },
              config = function(_, opts)
                require('obsidian').setup(opts)
                -- Set encoding to utf-8
                vim.opt.encoding = 'utf-8'
                -- Set conceallevel = 2 only for markdown buffers
                vim.api.nvim_create_autocmd('FileType', {
                  pattern = 'markdown',
                  callback = function()
                    vim.opt_local.conceallevel = 2
                  end,
                })
                -- Keymap for switching panes
                vim.keymap.set('n', '<C-l>', '<C-w>w', { desc = 'Switch Vim Panes', buffer = true })
              end,
            },
            {
              'MeanderingProgrammer/render-markdown.nvim',
              cmd = { 'RenderMarkdown' },
              dependencies = { 'nvim-treesitter/nvim-treesitter', 'echasnovski/mini.nvim' },
              config = function()
                require('obsidian').get_client().opts.ui.enable = false
                vim.api.nvim_buf_clear_namespace(0, vim.api.nvim_get_namespaces()['ObsidianUI'], 0, -1)
                require('render-markdown').setup {}
              end,
            },
            { 'nvim-tree/nvim-web-devicons', opts = {} },
            --   {
            --   'Kicamon/markdown-table-mode.nvim',
            --   config = function()
            --     require('markdown-table-mode').setup()
            --   end
            --   },
            {
              'SCJangra/table-nvim',
              ft = 'markdown',
              opts = {},
            },
            {
              'timantipov/md-table-tidy.nvim',
              -- default config
              opts = {
                padding = 1, -- number of spaces for cell padding
                key = '<leader>tt', -- key for command :TableTidy<CR>
              },
            },
          }
        mode: "0755"


    ## CHECK FOR NVIM, END_PLAY IF EXISTS #####################################
    - name: Skip if nvim binary exists
      ansible.builtin.meta: end_play
      when: nvim_binary.stat.exists and not force_update

    - name: Create a temporary file for Neovim download
      ansible.builtin.tempfile:
        state: file
        suffix: .tar.gz
      register: nvim_tempfile

    - name: Download Neovim tarball to the temporary file
      ansible.builtin.get_url:
        url: "{{ download_uri }}"
        dest: "{{ nvim_tempfile.path }}"
        validate_certs: true
        mode: "0644"
        force: true

    - name: Unarchive Neovim to Defined localnvim Directory
      ansible.builtin.unarchive:
        src: "{{ nvim_tempfile.path }}"
        dest: "{{ localnvim }}"
        remote_src: true
        extra_opts:
          - --strip-components=1

    - name: Delete temporary file
      ansible.builtin.file:
        path: "{{ nvim_tempfile.path }}"
        state: absent
