---
- name: Cross Platform Neovim Playbook
  hosts: localhost
  gather_facts: true

  vars:
    localbin: "{{ ansible_env.HOME }}/.local/bin"
    localnvim: "{{ ansible_env.HOME }}/.local/opt/nvim"
    system2nvimsystem:
      Darwin: "macos"
      Linux: "linux"

  tasks:

    - name: Ensure ~/.local/bin directory
      ansible.builtin.file:
        path: "{{ localbin }}"
        state: directory
        mode: "0755"

    - name: Ensure ~/.local/opt/nvim directory
      ansible.builtin.file:
        path: "{{ localnvim }}"
        state: directory
        mode: "0755"

    - name: Create symlink for nvim executable
      ansible.builtin.file:
        src: "{{ localnvim }}/bin/nvim"
        dest: "{{ localbin }}/nvim"
        state: link
        force: true

    - name: Create vim symlink for nvim symlink
      ansible.builtin.file:
        src: "{{ localbin }}/nvim"
        dest: "{{ localbin }}/vim"
        state: link
        force: true

    - name: Set Direct Download URI
      ansible.builtin.set_fact:
        download_uri: >-
          {{ "https://github.com/neovim/neovim/releases/latest/download/" +
          "nvim-" + system2nvimsystem[ansible_facts.system] + "-" +
          ansible_facts.architecture + ".tar.gz"
          }}

    - name: Check if nvim binary exists
      ansible.builtin.stat:
        path: "{{ localnvim }}/bin/nvim"
      register: nvim_binary

    - name: Check if FORCE_UPDATE is set
      ansible.builtin.set_fact:
        force_update: "{{ lookup('env', 'FORCE_UPDATE') | default('', true) }}"

    # - name: Display FORCE_UPDATE value
    #   ansible.builtin.debug:
    #     msg: "FORCE_UPDATE is set to: {{ force_update }}"

    - name: Skip if nvim binary exists
      ansible.builtin.meta: end_play
      when: nvim_binary.stat.exists and not force_update

    - name: Create a temporary file for Neovim download
      ansible.builtin.tempfile:
        state: file
        suffix: .tar.gz
      register: nvim_tempfile

    - name: Download Neovim tarball to the temporary file
      ansible.builtin.get_url:
        url: "{{ download_uri }}"
        dest: "{{ nvim_tempfile.path }}"
        validate_certs: true
        mode: "0644"
        force: true

    - name: Unarchive Neovim to Defined localnvim Directory
      ansible.builtin.unarchive:
        src: "{{ nvim_tempfile.path }}"
        dest: "{{ localnvim }}"
        remote_src: true
        extra_opts:
          - --strip-components=1

    - name: Delete temporary file
      ansible.builtin.file:
        path: "{{ nvim_tempfile.path }}"
        state: absent
