---

- name: Manage Tailscale installation and configuration
  hosts: localhost
  gather_facts: true

  vars_files:
    - secrets.yaml.vault # This line tells Ansible to load variables from vault.yml

  vars:
    # tailscale_version: "1.44.3"
    tailscale_binary_path: "/usr/bin"
    # tailscale_config_path: "/etc/tailscale/tailscaled.conf"
    tailscale_install_script_url: "https://tailscale.com/install.sh"
    tailscale_install_script_tempfile: "/tmp/tailscale_install.sh"
    # tailscale_service_name: "tailscaled"

  tasks:

    - name: Check if the tailscale binary exists and is executable
      ansible.builtin.stat:
        path: "{{ tailscale_binary_path }}/tailscale"
      register: binary_stat

    # - name: Display binary stat for debugging
    #   ansible.builtin.debug:
    #     var: binary_stat

    - name: Download the script if it doesn't exist or isn't executable
      when: not binary_stat.stat.exists or not binary_stat.stat.executable
      ansible.builtin.get_url:
        url: "{{ tailscale_install_script_url }}"
        dest: "{{ tailscale_install_script_tempfile }}"
        mode: '0755'

    - name: Execute the script
      when: not binary_stat.stat.exists or not binary_stat.stat.executable
      ansible.builtin.command: "bash {{ tailscale_install_script_tempfile }}"
      become: true
      changed_when: true

    - name: Remove temporary script if present
      ansible.builtin.file:
        path: "{{ tailscale_install_script_tempfile }}"
        state: absent

    - name: Execute the script
      ansible.builtin.command: "{{ tailscale_binary_path }}/tailscale status --self=true --peers=false --json=true"
      register: tailscale_output
      changed_when: false   ## Information Gathering

    # - name: Display tailscale status for debugging
    #   ansible.builtin.debug:
    #     var: tailscale_status.stdout

    - name: Parse JSON and set boolean variables
      ansible.builtin.set_fact:
        backend_active: "{{ (tailscale_output.stdout | from_json).BackendState == 'Running' }}"
        is_online: "{{ (tailscale_output.stdout | from_json).Self.Online }}"

    - name: Print the new variables to confirm
      ansible.builtin.debug:
        msg:
          - "Backend active status: {{ backend_active }}"
          - "Is online status: {{ is_online }}"

    - name: Ensure Node Tailscale is joined and configured when not online and backend_active is true
      when: not is_online and not backend_active
      # ansible.builtin.debug:
      #   msg: "This task would run and join the tailnet for {{ ansible_hostname }}"
        # sudo tailscale up --auth-key=tskey-auth-XXXXXXXXX --hostname=my-preapproved-server
      ansible.builtin.command: "{{ tailscale_binary_path }}/tailscale up --auth-key={{ tailscale_auth_key }} --hostname={{ ansible_hostname }}"
      changed_when: true
