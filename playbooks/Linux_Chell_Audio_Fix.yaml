## Check if ansible_product_name = "Chell"
## If yes, Clone git repo: 'https://github.com/WeirdTreeThing/chromebook-linux-audio' into ~/.local/opt
## Run ./setup-audio from chromebook-linux-audio
---
- name: Setup Chromebook Linux Audio for Chell
  hosts: localhost
  gather_facts: yes # Ensure facts are gathered to access ansible_product_name
  vars:
    home_dir: "{{ ansible_env.HOME }}"

  tasks:

    - name: End if Host is not Chell Architecture Chromebook
      ansible.builtin.meta: end_play
      when: not ansible_product_name == "Chell"

    - name: Ensure .local/opt directory exists
      ansible.builtin.file:
        path: "{{ ansible_env.HOME }}/.local/opt"
        state: directory
        mode: '0755'

    - name: Clone chromebook-linux-audio repository
      ansible.builtin.git:
        repo: 'https://github.com/WeirdTreeThing/chromebook-linux-audio'
        dest: "{{ ansible_env.HOME }}/.local/opt/chromebook-linux-audio"
        update: yes # Pull latest changes if already cloned
      #args:
        # Use a `register` to capture the output for conditional execution of the next task
        # This isn't strictly necessary for `git` module but good practice for more complex tasks
        # register: git_clone_result

    - name: Run ./setup-audio script
      ansible.builtin.command: "{{ home_dir }}/.local/opt/chromebook-linux-audio/setup-audio"
      # Change directory to the script's location for proper execution
      args:
        chdir: "{{ home_dir }}/.local/opt/chromebook-linux-audio"
      # Consider adding `creates` or `removes` to make this task idempotent
      # For example: creates: /path/to/a/file/created/by/setup-audio
      become: yes # Use sudo for potential task-level commands

